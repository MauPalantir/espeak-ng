phoneme 1   //  tone: low level
//  ipa ˨
  stress
  Tone(1, 1, envelope/p_level, NULL)
endphoneme

phoneme 3   //  tone: mid level
//  ipa ˧
  stress
  Tone(30, 30, envelope/p_fall, NULL)
endphoneme

phoneme 15   //  tone: low rise
//  ipa ˧˦
  stress
  Tone(10, 60, envelope/p_rise, NULL)
endphoneme

phoneme 51   //  tone: high fall
//  ipa ˦˨
  stress
  Tone(50, 1, envelope/p_fall, NULL)
endphoneme

phoneme 5   //  tone: high level
//  ipa ˦
  stress
  Tone(60, 60, envelope/p_level, NULL)
endphoneme

// Short vowels

phoneme e
  vwl starttype #e endtype #e
  length 180
  FMT(vowel/e_3)
endphoneme

phoneme a
  vwl starttype #a endtype #a
  length 180
  FMT(vowel/a)
endphoneme

phoneme A
  vwl starttype #o endtype #o
  length 140
  FMT(vowel/0_3)
endphoneme

phoneme E
  vwl starttype #e endtype #e
  length 140
  FMT(vowel/e_mid)
endphoneme

phoneme i
  vwl starttype #i endtype #i
  length 140
  IfNextVowelAppend(;)
  FMT(vowel/i_4)
endphoneme

phoneme o
  vwl starttype #o endtype #o
  length 130
  FMT(vowel/o_mid)
endphoneme

phoneme u
  vwl starttype #u endtype #u
  length 130
  FMT(vowel/uu_bck)
endphoneme

phoneme @   //  Schwa
  vwl starttype #@ endtype #@
  unstressed
  length 40
  FMT(vowel/@_4) 
endphoneme

phoneme I
  vwl starttype #i endtype #i
  unstressed
  length 40
  FMT(vowel/ii)
endphoneme

phoneme U
  vwl starttype #u endtype #u
  unstressed
  length 40
  FMT(vowel/uu_2)
endphoneme

phoneme y
  vwl starttype #u endtype #u
  length 130
  FMT(vowel/u#_7)
endphoneme


phoneme e:
  vwl starttype #e endtype #e
  length 380
  FMT(vowel/e_3)
endphoneme

phoneme a:
  vwl starttype #a endtype #a
  length 380
  FMT(vowel/a)
endphoneme

phoneme A:
  vwl starttype #o endtype #o
  length 380
  FMT(vowel/0_3)
endphoneme

phoneme E:
  vwl starttype #e endtype #e
  length 380
  FMT(vowel/e_mid)
endphoneme

phoneme i:
  vwl starttype #i endtype #i
  length 380
  FMT(vowel/i_4)
endphoneme

phoneme o:
  vwl starttype #o endtype #o
  length 380
  FMT(vowel/o_mid)
endphoneme

phoneme u:
  vwl starttype #u endtype #u
  length 380
  FMT(vowel/uu_bck)
endphoneme

phoneme y:
  vwl starttype #u endtype #u
  length 380
  FMT(vowel/u#_7)
endphoneme

// Diphtongs

phoneme : //  lengthen previous vowel by "length"
  virtual
  length 100
endphoneme

phoneme ai
  import_phoneme zh/ai
endphoneme

phoneme ao
  import_phoneme zhy/au
endphoneme

phoneme Au
  import_phoneme zh/Au
endphoneme

phoneme eo
  import_phoneme ro/eo
endphoneme

phoneme eoi
  import_phoneme zhy/eoi
endphoneme

phoneme ei
  import_phoneme en-us/eI
endphoneme

phoneme ie
  import_phoneme fi/ie 
endphoneme

phoneme iao
  import_phoneme zh/iAu
endphoneme

phoneme ie
  import_phoneme zh/iE
endphoneme

phoneme io
  import_phoneme zh/io
endphoneme

phoneme uei
  import_phoneme zh/uei
endphoneme

phoneme ua
  import_phoneme zh/uA
endphoneme

phoneme ui
  import_phoneme zhy/ui
endphoneme

phoneme oa
  import_phoneme ro/Oa
endphoneme

phoneme ea
  import_phoneme ro/ea
endphoneme

phoneme uo
  import_phoneme zh/uo
endphoneme

phoneme oi
  import_phoneme shn/oi
endphoneme

phoneme m-
  vwl starttype #@ endtype #@
  ipa mU+0329
  lengthmod 4
  length 170

  IF thisPh(isWordStart) THEN
    length 380
  ENDIF
  IF KlattSynth THEN
    FMT(klatt/m-syl)
  ENDIF
  FMT(m/m-syl)
endphoneme

phoneme n-
  vwl starttype #@ endtype #@
  ipa nU+0329
  lengthmod 4
  length 240

  IF thisPh(isWordStart) THEN
    length 380
  ENDIF
  IF KlattSynth THEN
    FMT(klatt/n-syl)
  ENDIF
  FMT(n/n-syl)
endphoneme

phoneme N-
  vwl starttype #e endtype #e
  ipa ŋU+0329
  lengthmod 4
  length 170

  IF thisPh(isWordStart) THEN
    length 380
  ENDIF

  FMT(nn/nn-syl)
endphoneme

phoneme r"-
  vwl starttype #@ endtype #@
  ipa ʀU+0329
  lengthmod 4
  length 170

  IF thisPh(isWordStart) THEN
    length 280
  ENDIF
  FMT(r3/r_uvl) // addWav(r3/r_uvl.wav, 75)
endphoneme

phoneme D // dh
  import_phoneme en-us/D
endphoneme

phoneme P // f
  import_phoneme ja/p\\
endphoneme